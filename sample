#!/usr/bin/env node

var fs = require('fs')
var exec = require('child_process').exec
var split = require('split')
var tilebelt = require('@mapbox/tilebelt')

var tiles = process.argv[2]
var trainSize = process.argv[3]
var zoomLevel = (process.argv[4] || '').trim()

var sample
var i = -1

countLines(tiles, function (err, total) {
  if (err) { throw err }
  fs.createReadStream(tiles)
  .pipe(split())
  .on('data', function (line) {
    if (!sample) {
      if (zoomLevel) {
        var realZoom = parseInt(line.split(' ')[1], 10)
        total = total * Math.pow(4, zoomLevel - realZoom)
      }
      sample = []
      while (sample.length < trainSize && sample.length < total) {
        var l = Math.floor(Math.random() * total)
        if (sample.indexOf(l) < 0) { sample.push(l) }
      }
      sample.sort((a, b) => (a - b))
    }

    if (zoomLevel) {
      line = line.split(' ')
      var tile = [line[2], line[3], line[1]].map(Number) // zxy -> xyz
      var tiles = getDescendants(tile, zoomLevel)
      tiles.forEach(function (tile) {
        if (sample[0] === i++) {
          console.log([line[0], tile[2], tile[0], tile[1]].join(' ')) // xyz -> file z x y
          sample.shift()
        }
      })
    } else {
      if (sample[0] === i++) {
        console.log(line)
        sample.shift()
      }
    }
  })
})

function getDescendants (tile, zoom) {
  var z = tile[2]
  var tiles = [tile]
  while (z < zoom) {
    var c = 0
    var nextTiles = new Array(tiles.length * 4)
    for (var i = 0; i < tiles.length; i++) {
      var children = tilebelt.getChildren(tiles[i])
      for (var j = 0; j < 4; j++) {
        nextTiles[c++] = children[j]
      }
    }
    tiles = nextTiles
    z++
  }
  return tiles
}

function countLines (file, cb) {
  exec('wc -l ' + file, function (err, result) {
    if (err) { return cb(err) }
    cb(null, +result.trim().split(' ')[0])
  })
}
